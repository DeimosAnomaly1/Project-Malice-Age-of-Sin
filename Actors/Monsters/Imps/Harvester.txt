Class PM_Harvester : PMDeathMonsterBase
{
  bool phase;
  int phasetimer;
  Default
  {
    PMMonsterBase.CodexLore
	"Harvesters are cruel beings residing in the circle of Death. Living so close to the abyss, these demons usurp the souls of the dead to use as playthings, weaving their essence to use as weapons against others or purely for their own entertainment.
	 They, like many other demons in the circle, have absorbed countless souls after Hell's invasion, and are poised to use them against you.
	 
	 Attacks by casting homing souls at you, either in bursts or concentrating the essence into one big soul.";
    Health 100;
    Radius 20;
    Height 56;
    Speed 6;
	Scale 1.05;
    PainChance 160;
	Alpha 1.0;
	MONSTER;
    SeeSound "Harvester/Sight";
    PainSound "Harvester/Pain";
    DeathSound "Harvester/Death";
    ActiveSound "Harvester/Active";
    Obituary "%o's soul belongs to a Harvester now.";
	Species "Imp";
	Tag "Harvester";
	StencilColor "Blue";
    BloodType "PM_DeathBloodBase";
    BloodColor "Black";
    +FLOORCLIP
	+MissileMore
	+DONTHARMSPECIES
	TeleFogSourceType "PM_SmallDemonicTeleportFog";
	TeleFogDestType "PM_DemonicTeleportFog";
  }
  
	override void PostBeginPlay()
	{
	 tex[0] = TexMan.CheckForTexture("DUSTC0",TexMan.Type_Sprite);
	 tex[1] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
	}
	
	TextureID tex[2];	 

    void PM_HarvesterWither()
	{
	A_SpawnParticleEx
	 (
	 "545454",
	 tex[1],
	 style: STYLE_None,
	 flags: SPF_ROLL|SPF_RELATIVE,
	 lifetime: random(50,160),
	 size: frandom(10,100),
	 xoff: frandom(-20,20),
	 yoff: frandom(-20,20),
	 zoff: 0,
	 velx: frandom(-1,1),
	 vely: frandom(-1,1),
	 velz: frandom(0,2),
	 startalphaf: frandom(0.2,0.95),
	 fadestepf: -1,
	 sizestep: frandom(-0.8,0.8),
	 startroll: random(-180,180),
	 rollvel: frandom(-0.3,0.3)
	 );
	 A_SpawnParticleEx
	 (
	 "848484",
	 tex[0],
	 style: STYLE_Normal,
	 flags: SPF_RELATIVE|SPF_ROLL,
	 lifetime: random(90,270),
	 size: frandom(1,22),
	 xoff: random(-25,25),
	 yoff: random(-25,25),
	 zoff: 5,
	 velx: frandom(-1,1),
	 vely: frandom(-1,1),
	 velz: frandom(0.3,4),
	 startalphaf: 1.0,
	 fadestepf: -0.05,
	 sizestep: frandom(-0.1,-1),
	 startroll: random(-180,180),
	 rollvel: random(-4,4)
	 );
	 A_SpawnParticleEx
	 (
	 "848484",
	 tex[0],
	 style: STYLE_Normal,
	 flags: SPF_RELATIVE|SPF_ROLL,
	 lifetime: random(90,270),
	 size: frandom(0.5,15),
	 xoff: random(-25,25),
	 yoff: random(-25,25),
	 zoff: 5,
	 velx: frandom(-1,1),
	 vely: frandom(-1,1),
	 velz: frandom(0.3,4),
	 startalphaf: 1.0,
	 fadestepf: -0.05,
	 sizestep: frandom(-0.1,-1),
	 startroll: random(-180,180),
	 rollvel: random(-4,4)
	 );
	}
	
	void PM_HarvesterPhaseStop()
	{
	 phase = false;
	 for(int i=2;i>0;i--)
	 A_SpawnProjectile("AbhorBallExplode",random(10,45),0,random(0,360),2,random(0,360));
	 A_SetRenderStyle(1.0,STYLE_Normal);
	 A_StopSound(11);
	 A_SetSpeed(6);
	 A_StartSound("Harvester/PhaseEnd",12);
	}
	
  States
  {
  Spawn:
    SLHV AAAAAAAAAA 10 PM_Look();
	SLHV A 0
	{
	if (!random(0, 30))
			{
				A_StartSound(activesound,554,volume:frandom(0.1,0.5),pitch:frandom(0.60,0.78));
			}
	}
	SLHV A 0 A_Jump(45,"Explore");
    Loop;
  Explore:
	TNT1 A 0
	{
	if (!random(0, 12))
			{
				A_StartSound(activesound,554,volume:frandom(0.1,0.5),pitch:frandom(0.60,0.78));
			}
	}
	TNT1 A 0 A_StartSound("Imp/Step",4,volume:0.7);
	SLHV AAABBB 4
	{
	PM_Look();
	A_Wander();
	}
	TNT1 A 0 A_StartSound("Imp/Step",4,volume:0.7);
	SLHV CCCDDD 4
	{
	A_Wander();
	PM_Look();
	}
	TNT1 A 0 A_SetSpeed(6);
	SLHV A 0 A_Jump(40,"Spawn");
    Loop;
  Look:
	TNT1 A 0 {bShootable = true;}
	TNT1 A 0 A_StartSound("Imp/Step",4);
    SLHV AAABBB 2 PM_LookingForPlayer();
	TNT1 A 0 A_JumpIfTargetinLOS("Spotted",250,JLOSF_DEADNOJUMP);
	TNT1 A 0 A_StartSound("Imp/Step",4);
	SLHV CCCDDD 2 PM_LookingForPlayer();
    Loop;
  Spotted:
    TNT1 A 0 A_Jump(46,"Phase","Roar");
	Goto See;
  Roar:
    TNT1 A 0 PM_AlertSound();
	Goto See;
  See:
	TNT1 A 0 {bShootable = true;}
	TNT1 A 0 { if(phase) PM_HarvesterPhaseStop(); }
	TNT1 A 0 A_Jump(16,"Phase");
	TNT1 A 0 A_StartSound("Imp/Step",4);
    SLHV AAABBB 2 A_Chase();
	TNT1 A 0 A_StartSound("Imp/Step",4);
	SLHV CCCDDD 2 A_Chase();
    Loop;
  PhaseSee:
    SLHV AAABBBCCCDDDAAABBBCCCDDDAAABBBCCDD 1
	  {
	   A_Wander();
	   A_SpawnItemEx("PM_GenericPhaseGhost",flags:SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERSTENCILCOL);
	  }
	TNT1 A 0
	{
	 if(phasetimer < 0)
	 SetStateLabel("PhaseSeeLoop");
	 phasetimer--;
	}
	Loop;
  PhaseSeeLoop:
    SLHV AAABBBCCCDDD 1
	  {
	   A_Chase(flags:CHF_NOPLAYACTIVE);
	   A_SpawnItemEx("PM_GenericPhaseGhost",flags:SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERSTENCILCOL);
	  }
	 TNT1 A 0 A_Jump(40,"See");
	Loop;
  Melee:
  Missile:
    TNT1 A 0;
    TNT1 A 0 { if(phase) PM_HarvesterPhaseStop(); }
	TNT1 A 0 A_Jump(130,"Missile3","Missile4");
	TNT1 A 0 A_Jump(40,"Missile2");
    SLHV EFG 4 A_FaceTarget();
    SLHV HIJK 5 Bright A_FaceTarget();
    SLHV L 8 Bright A_SpawnProjectile("PM_SoulHarvesterBall");
    SLHV M 10;
    Goto See;
  Missile3:
	SLHV EFG 2 A_FaceTarget();
    SLHV HIJK 2 Bright A_FaceTarget();
    SLHV L 3 Bright A_SpawnProjectile("PM_SmallSoulHarvesterBall");
    SLHV M 3;
	Goto See;
  Missile4:
	SLHV EFG 3 A_FaceTarget();
    SLHV HIJKK 3 Bright A_FaceTarget();
    SLHV LLL 10 Bright
	{
	A_SpawnProjectile("PM_SmallSoulHarvesterBall");
	A_FaceTarget();
	}
    SLHV M 6;
	Goto See;
  Phase:
    TNT1 A 0 { if(phase) SetStateLabel("See"); }
	TNT1 AA 0 A_SpawnProjectile("AbhorBallExplode",random(10,45),0,random(0,360),2,random(0,360));
	SLHV N 5 
	{
	phase = true;
	phasetimer += random(3,5);
	A_FaceTarget();
	A_StartSound("Harvester/PhaseStart",10);
	A_StartSound("Harvester/PhaseLoop",11,CHANF_LOOPING,volume:0.85);
	}
	TNT1 AA 0 A_SpawnProjectile("AbhorBallExplode",random(10,45),0,random(0,360),2,random(0,360));
	TNT1 A 0 A_SetSpeed(15);
	TNT1 A 0 A_SetRenderStyle(0.1,STYLE_Add);
	Goto PhaseSee;
  Missile2:
	SLHV EFG 4 A_FaceTarget();
	TNT1 A 0 A_StartSound("Harvester/Summon1");
	TNT1 A 0 {bNOPAIN = true;}
	SLHV H 1 A_SpawnItemEx("HSummonCircle",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
	SLHV HHHH 2 Light("SoulHarvesterBall1")
	{
	A_Facetarget();
	A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
	}
	TNT1 A 0 A_StartSound("Harvester/Summon2",CHAN_6);
	SLHV HHHHHHHHHHHHHHHHHHHHHHH 2 Light("SoulHarvesterBall1")
	{
	A_Facetarget();
	A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
	}
	TNT1 A 0 A_StartSound("Harvester/Summon3",CHAN_5,CHANF_DEFAULT,0.5);
	TNT1 A 0 A_SpawnItemEx("HSoulSpawner2",45,0,0,0,0,0,0);
	SLHV HHHHHHHHH 2 Light("SoulHarvesterBall1");
	SLHV H 2 Light("SoulHarvesterBall1")
	{
	A_Facetarget();
	A_SpawnItemEx("HFloatReadySoul2",45,0,50,0,0,0,0);
	}
	SLHV HHHHHHHH 2 Light("SoulHarvesterBall1")
	{
	A_Facetarget();
	A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
	}
	SLHV HHHHHHHH 2 Light("SoulHarvesterBall1")
		{
		A_Facetarget();
		A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
		}
	TNT1 A 0
		{
		bool spawned; 
		actor skull;
		[spawned,skull]=A_SpawnItemEx("HSummonedSoul",45,0,50,4,0,0,0,SXF_SETTARGET);
		if (spawned && skull!=null) {
			skull.tracer=self.target;
			}
		}
	SLHV HHHHHHHH 2 Light("SoulHarvesterBall1")
		{
		A_Facetarget();
		A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
		}
	/*TNT1 A 0
		{
		bool spawned; 
		actor skull;
		[spawned,skull]=A_SpawnItemEx("HSummonedSoul",35,35,50,4,0,0,0,SXF_SETTARGET);
		if (spawned && skull!=null) {
			skull.tracer=self.target;
			}
		}*/
	SLHV HHHHHHHH 2 Light("SoulHarvesterBall1")
		{
		A_Facetarget();
		A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
		}
	/*TNT1 A 0
		{
		bool spawned; 
		actor skull;
		[spawned,skull]=A_SpawnItemEx("HSummonedSoul",35,-35,50,4,0,0,0,SXF_SETTARGET);
		if (spawned && skull!=null) {
			skull.tracer=self.target;
			}
		}*/
	SLHV HHH 2 Light("SoulHarvesterBall1")
		{
		A_Facetarget();
		A_SpawnItemEx("PM_BlueFireEffect",10,4,31,0,0,random(1,2));
		}
	TNT1 A 0 {bNOPAIN = False;}
	Goto See;
  Pain:
    TNT1 A 0 { if(phase) PM_HarvesterPhaseStop(); }
    SLHV N 3;
    SLHV N 3 A_Pain();
    Goto See;
  Death:
    TNT1 A 0 { if(phase) PM_HarvesterPhaseStop(); }
    SLHV O 7 PM_Scream();
	TNT1 A 0 A_SetRenderStyle(1.0,STYLE_Translucent);
    SLHV PQR 7;
    SLHV S 6 A_SpawnItemEx("SoulHarvesterGhost", 0,0,32, 0,0,0, 0, SXF_CLIENTSIDE);
    SLHV T 5 A_Fall();
	TNT1 A 0 A_StartSound("Corpse/Fall",CHAN_6);
    SLHV UV 5;
	SLHV V 2;
	SLHV WWWWWW 3
	{
	for(int i=random(1,2);i>0;i--)
	PM_HarvesterWither();
	}
	SLHV WWWWWWWWWWW 2 
	{
	for(int i=random(1,2);i>0;i--)
	PM_HarvesterWither();
	}
	SPIP WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW 1
	{
	A_FadeOut(0.04);
	for(int i=random(1,2);i>0;i--)
	PM_HarvesterWither();
	}
    Wait;
  XDeath:
    TNT1 A 0 { if(phase) PM_HarvesterPhaseStop(); }
    TNT1 A 0 A_StopSound(555);
    SLHV X 6 A_XScream();
    SLHV Y 6 A_SpawnItemEx("SoulHarvesterGhost", 0,0,32, 0,0,0, 0, SXF_CLIENTSIDE);
    SLHV Z 6 A_RemoveChildren;
	TNT1 A 0 A_SetRenderStyle(1.0,STYLE_Translucent);
    SLHV [ 6 A_Fall();
    SLHV ] 6;
	SLHW AAAAAA 3 
	{
	for(int i=random(1,2);i>0;i--)
	PM_HarvesterWither();
	}
	SLHW AAAAAAAAAAA 2 
	{
	for(int i=random(1,2);i>0;i--)
	PM_HarvesterWither();
	}
	SPIW AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
	{
	A_FadeOut(0.04);
	for(int i=random(1,2);i>0;i--)
	PM_HarvesterWither();
	}
    Wait;
  }
}

Class OrbitSpirit : PM_SoulHarvesterBall
{
  Default
  {
    SeeSound "";
    Scale 0.4;
    Alpha 0.5;
    Speed 3;
    +NOCLIP
  }

  States
  {
  Spawn:
    SHBA AABB 1 Bright;
    SHBA A 3 Bright A_SpawnProjectile("OrbitSpirit", 0, 0, 75);
    Stop;
  Death:
    SHBA A 2 Bright A_FadeOut(0.015);
    loop;
  }
}

Class OrbitSpirit2 : OrbitSpirit
{
  Default
  {
    Speed 10;
  }

  States
  {
  Spawn:
    SHBA AABB 1 Bright ;
    SHBA A 0 Bright A_SpawnProjectile("OrbitSpirit", 0, 0, -75);
    stop;
  Death:
    SHBA A 2 Bright A_FadeOut(0.015);
    loop;
  }
}

Class PM_SoulHarvesterBall : PM_ImpBallBase
{
  Default
  {
    Radius 5;
    Height 5;
    Scale 0.63;
    Speed 13;
    DamageFunction 15;
	DamageType "Soul";
    Renderstyle "Add";
    SeeSound "Harvester/SoulLaunch";
    DeathSound "Harvester/SoulExp";
	Decal "PM_DeathSoulScorchMed";
    PROJECTILE;
    +SEEKERMISSILE
  }

 override void PostBeginPlay()
   {
    tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
	tex[1] = TexMan.CheckForTexture("SPKOS0",TexMan.Type_Sprite);
	tex[2] = TexMan.CheckForTexture("DTPRB0",TexMan.Type_Sprite);
   }

	TextureID tex[3];

  States
  {
  Spawn:
    TNT1 A 0;
	  TNT1 A 0 A_StartSound("Harvester/SoulLoop",11,CHANF_LOOPING,1,0.4);
	Go:
    SHBA AABB 1 Bright
	{
	A_SpawnParticleEx
	 (
	 "0B3D94",
	 tex[0],
	 style: STYLE_Add,
	 flags: SPF_ROLL|SPF_RELATIVE,
	 lifetime: random(15,50),
	 size: 20.0,
	 xoff: -5,
	 startalphaf: frandom(0.25,0.65),
	 fadestepf: -1,
	 startroll: random(-180,180)
	 );
	 A_SpawnParticleEx
	 (
	 "143B76",
	 tex[0],
	 style: STYLE_Add,
	 flags: SPF_ROLL|SPF_RELATIVE,
	 lifetime: random(6,40),
	 size: 35.0,
	 xoff: -5,
	 startalphaf: frandom(0.5,0.8),
	 fadestepf: -1,
	 startroll: random(-180,180)
	 );
	A_SpawnParticleEx
	 (
	 "61A9FF",
	 tex[1],
	 style: STYLE_Add,
	 flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	 lifetime: random(10,70),
	 size: frandom(0.1,8),
	 xoff: random(-4,0),
	 yoff: random(-3,3),
	 zoff: random(-3,3),
	 velx: frandom(-0.6,0.6),
	 vely: frandom(-0.6,0.6),
	 velz: frandom(-0.6,1),
	 startalphaf: 1.0,
	 fadestepf: -0.5,
	 sizestep: -0.1,
	 startroll: random(-180,180)
	 );
	 A_SpawnParticleEx
	 (
	 "",
	 tex[2],
	 style: STYLE_Add,
	 flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,
	 lifetime: random(1,2),
	 size: frandom(10.0,140.0),
	 angle: 0,
	 xoff: -8,
	 startalphaf: frandom(0.2,0.85),
	 startroll: random(-180,180)
	 );
	A_SeekerMissile(1,2,SMF_PRECISE);
	A_Weave(1, 1, 1.5, 0);
	}
    Loop;
  Death:
    SHBA CDEFGHIJKL 4 Bright;
    Stop;
  }
}

Class PM_SmallSoulBallTrail : Actor
{
  Default
  {
    Radius 1;
    Height 1;
    Speed 0;
    RENDERSTYLE "ADD";
    ALPHA 0.1;
	Scale 1;
    PROJECTILE;
    +NOCLIP
	+CLIENTSIDEONLY
  }

  States
  {
  Spawn:
  Death:
    SBTR H 2;
    SBTR ABCDEFG 2 Bright;
    Stop;
  }
}


Class PM_SmallSoulHarvesterBall : PM_ImpBallBase
{
  Default
  {
    Radius 5;
    Height 5;
    Scale 0.4;
    Speed 14;
    DamageFunction 8;
	DamageType "Soul";
    Renderstyle "Add";
    SeeSound "GenericSmallFireball";
	Decal "PM_DeathSoulScorchSmall";
    DeathSound "Abhor/SoulExp";
    PROJECTILE;
    +SEEKERMISSILE
  }

   override void PostBeginPlay()
   {
    tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
   }

	TextureID tex[1];

  States
  {
  Spawn:
    SHBA AABB 1 Bright
	{
	A_SpawnParticleEx
	 (
	 "0B3D94",
	 tex[0],
	 style: STYLE_Add,
	 flags: SPF_ROLL|SPF_RELATIVE,
	 lifetime: random(15,50),
	 size: 20.0,
	 xoff: -5,
	 startalphaf: frandom(0.25,0.65),
	 fadestepf: -1,
	 startroll: random(-180,180)
	 );
	 A_SpawnParticleEx
	 (
	 "143B76",
	 tex[0],
	 style: STYLE_Add,
	 flags: SPF_ROLL|SPF_RELATIVE,
	 lifetime: random(6,40),
	 size: 35.0,
	 xoff: -5,
	 startalphaf: frandom(0.5,0.8),
	 fadestepf: -1,
	 startroll: random(-180,180)
	 );
	A_SeekerMissile(1,1);
	A_Weave(random(-3,3), random(-3,3), random(0,3), random(0,2));
	}
    Loop;
  Death:
    SHBA CDEFGHIJKL 4 Bright;
    Stop;
  }
}

Class SummonedSoulTrail : Actor
{
  Default
  {
    Radius 1;
    Height 1;
    Speed 0;
    RENDERSTYLE "ADD";
    ALPHA 0.45;
	Scale 0.5;
	+NOGRAVITY;
    +NOCLIP;
	+CLIENTSIDEONLY;
  }

  States
  {
  Spawn:
  Death:
    HSO2 A 2 Bright A_FadeOut(0.05);
    Wait;
  }
}

Class HSummonedSoul : Actor
{
  Default
  {
    Radius 7;
    Height 8;
    Scale 0.65;
    Speed 4;
    Damage 4;
    Renderstyle "Add";
    SeeSound "";
    DeathSound "HeresyLord/RedDeath";
	Species "Imp";
	//PROJECTILE;
	+MISSILE;
	//MONSTER;
	+SEEKERMISSILE;
	+NOGRAVITY;
	+DONTHARMCLASS;
	+DONTHARMSPECIES;
	+ACTIVATEPCROSS;
	+NOTELEPORT;
	+NOBLOCKMAP;
	-SHOOTABLE;
	-SOLID;
	+ACTIVATEIMPACT;
  }

  States
  {
  Spawn:
	TNT1 A 0;
	TNT1 A 0 A_StartSound("Harvester/Summon4");
  Spawn2:
    HSO2 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 2 Bright Light("SoulHarvesterBall1")
	{
	A_FaceTracer();
	A_SpawnItemEx("SummonedSoulTrail");
	}
	HSO2 BBBBBBB 5 Light("SoulHarvesterBall2")
	{
	A_FaceTracer();
	A_SpawnItemEx("SummonedSoulTrail");
	A_SpawnProjectile("PM_HSummonedSoulBall",-7,0,random(-3,3),CMF_AIMDIRECTION|CMF_TRACKOWNER|CMF_OFFSETPITCH,random(-3,3));
	}
	HSO2 B 2 Bright Light("SoulHarvesterBall1")
	{
	A_FaceTracer();
	A_SpawnItemEx("SummonedSoulTrail");
	}
	HSO2 B 2 Bright Light("SoulHarvesterBall1")
	{
	A_FaceTracer();
	A_SpawnItemEx("SummonedSoulTrail");
	}
	Loop;
  Melee:
  Death:
	TNT1 A 0 A_Explode(10, 56, 1);
	TNT1 A 0 A_SpawnItemEx("PM_BlueExplosionFlareSmall",0,0,0);
	TNT1 AAAAAAA 0 A_SpawnItemEx("PM_BlueFireEffect",0,0,0,random(-5,5),random(-5,5),random(-5,5));
    SHBA CDEFGHIJKL 3 Bright Light("SoulHarvesterBall2");
    Stop;
  }
}

Class PM_HSummonedSoulBall : PM_ImpBallBase
{
   Default
   {
   Height 3;
   Radius 3;
   Speed 12;
   Damagefunction 10;
   DamageType "Soul";
   Scale 0.6;
   Alpha 0.9;
   PROJECTILE;
   RenderStyle "Add";
   +BRIGHT
   DamageType "PM_BulletHellDamage";
   SeeSound "PM/BulletHellSpawn";
   DeathSound "GenericPlasmaExp";
   +FORCEXYBILLBOARD 
   +ROLLSPRITE
   +ROLLCENTER
   +SEEKERMISSILE
   }
   States
   {
   Spawn:
	  TNT1 A 0;
	  TNT1 A 0 A_SeekerMissile(0,2);
	  TNT1 AA 0
	  {
	  A_SpawnParticleEx
		(
		"",
		TexMan.CheckForTexture("DTPRB0"),
		style: STYLE_Add,
		flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
		lifetime: random(3,8),
		size: random(80,130),
		angle: 0,
		xoff: 0,
		yoff: 0,
		zoff: 0,
		startalphaf: 1,
		fadestepf: -1,
		sizestep: -15,
		startroll: random(-180,180)
		);
	}
   Go:
      BH_B B 1 Bright A_SetRoll(roll+25);
    Loop;
   Death:
		TNT1 AA 0
		{
		A_SpawnParticleEx
		(
		"",
		TexMan.CheckForTexture("DTPRB0"),
		style: STYLE_Add,
		flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,
		lifetime: random(2,8),
		size: random(100,170),
		angle: 0,
		xoff: 0,
		yoff: 0,
		zoff: 0,
		startalphaf: 0.95,
		fadestepf: -1,
		sizestep: -15,
		startroll: random(-180,180)
		);
		}
	  TNT1 A 5 Light("SoulHarvesterBall7");
      Stop;
	  }
}

Class SoulHarvesterGhost : Actor
{
  Default
  {
    Radius 1;
    Height 1;
    Speed 0;
    RENDERSTYLE "ADD";
    ALPHA 0.9;
    SeeSound "harvester/ghost";
    PROJECTILE;
    +NOCLIP
  }

  States
  {
  Spawn:
  Death:
    SHGH A 0 NoDelay A_StartSound("Harvester/Ghost");
    SHGH ABCDEFG 4 Bright;
    Stop;
  }
}

Class SoulBallTrail : Actor
{
  Default
  {
    Radius 1;
    Height 1;
    Speed 0;
    RENDERSTYLE "ADD";
    ALPHA 0.1;
	Scale 1.3;
    PROJECTILE;
    +NOCLIP
	+CLIENTSIDEONLY
  }

  States
  {
  Spawn:
  Death:
    SBTR H 2;
    SBTR ABCDEFG 2 Bright;
    Stop;
  }
}

